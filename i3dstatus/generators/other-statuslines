#!/usr/bin/env python3

from subprocess import Popen, PIPE
import sys
from threading import Thread
import json

import os
from i3dstatus.block import Block

block = Block(os.path.basename(__file__))

try:
    import ijson.backends.yajl2 as ijson
except ImportError:
    block.error('could not import python3 module ijson yajl2 backend')
    raise e

statuslines = ['i3status']

if 'statuslines' in block.config:
    if isinstance(block.config, str):
        statuslines = [block.config]
    if isinstance(block.config, list):
        statuslines = block.config


class OtherStatusline(Thread):
    def __init__(self, statusline_path):
        self.statusline_path = statusline_path
        Thread.__init__(self)

    def run(self):
        with Popen(self.statusline_path, stdout=PIPE) as proc:
            try:
                header = json.loads(str(proc.stdout.readline(), 'UTF-8'))
            except json.decoder.JSONDecodeError as e:
                err = 'could not parse json for {}'.format(self.statusline_path)
                block.error(err)
                raise e

            if 'version' not in header or header['version'] != 1:
                err = 'invalid status header for {}'.format(self.statusline_path)
                block.error(err)
                return

            parser = ijson.parse(proc.stdout, buf_size=1)

            other_block = {}
            last_key = ''

            for _prefix, event, value in parser:
                if event == 'start_map':
                    other_block = {}
                elif event == 'map_key':
                    last_key = value
                elif event in ['null', 'boolean', 'string', 'number']:
                    other_block[last_key] = value
                elif event == 'end_map':
                    # XXX: we probably need a method to show more than one
                    # block
                    block.show(block)

for statusline in statuslines:
    OtherStatusline(statusline).start()
