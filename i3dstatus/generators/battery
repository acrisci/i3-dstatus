#!/usr/bin/env python3

from gi.repository import GLib
import dbus
import dbus.mainloop.glib
import sys
from i3dstatus.block import Block
import os

block = Block(os.path.basename(__file__))

def get_first_battery_path(system_bus):
    upower = system_bus.get_object(
            'org.freedesktop.UPower', '/org/freedesktop/UPower')
    devices = upower.EnumerateDevices(dbus_interface='org.freedesktop.UPower')

    for d in devices:
        name = d.split('/')[-1]
        if name.startswith('battery_'):
            return d


def update_status(properties, battery_format, battery_name):
    context = {
        'name': battery_name,
        'percentage': '',
    }

    if 'Percentage' in properties:
        context['percentage'] = properties['Percentage']

    block.show(battery_format, markup='pango', context=context)


def main():
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    system_bus = dbus.SystemBus()

    battery_format = '%name %percentage%'
    battery_path = ''

    if 'format' in block.config:
        battery_format = block.config['format']
    if 'name' in block.config:
        battery_path = '/org/freedesktop/UPower/devices/battery_' \
                + block.config['name']

    if not battery_path:
        battery_path = get_first_battery_path(system_bus)

    if not battery_path:
        # TODO log
        sys.exit(1)


    battery_name = battery_path.split('/')[-1][len('battery_'):]

    try:
        battery = system_bus.get_object('org.freedesktop.UPower', battery_path)
    except dbus.DBusException as e:
        block.error('could not find upower dbus interface')
        raise e

    battery_properties = dbus.Interface(battery,
            'org.freedesktop.DBus.Properties')

    percentage = battery_properties.Get('org.freedesktop.UPower.Device',
            'Percentage')

    update_status({'Percentage': percentage}, battery_format, battery_name)

    def signal_handler(_iface, properties, _):
        # TODO handle more properties
        if 'Percentage' in properties:
            update_status(properties, battery_format, battery_name)

    battery_properties.connect_to_signal('PropertiesChanged', signal_handler)

    loop = GLib.MainLoop()
    loop.run()


if __name__ == '__main__':
    main()
